<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>fr.jeci.alfresco</groupId>
  <artifactId>alfresco-collabora-online</artifactId>
  <version>0.4.2-alfresco52</version>
  <name>Alfresco Collabora Online</name>
  <description>Collabora Online extension for Alfresco 6+</description>
  <packaging>pom</packaging>
  <prerequisites>
    <maven>3.3.0</maven>
  </prerequisites>
  <properties>
    <!-- Alfresco Maven Plugin version to use -->
    <alfresco.sdk.version>3.1.0</alfresco.sdk.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Properties used in dependency declarations, you don't need to change these -->
    <alfresco.groupId>org.alfresco</alfresco.groupId>
    <alfresco.bomDependencyArtifactId>alfresco-platform-distribution</alfresco.bomDependencyArtifactId>
    <maven.alfresco.edition>community</maven.alfresco.edition>
    <!-- Alfresco Surf version, if you change Share version you might need to change Surf version -->
    <alfresco.surf.version>6.11</alfresco.surf.version>

    <!-- JRebel Hot reloading of classpath stuff and web resource stuff -->
    <jrebel.version>1.1.6</jrebel.version>

    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <!-- Environment configuration properties -->
    <public.port>8080</public.port>
    <public.host>localhost</public.host>

    <!-- Alfresco Platform Config -->
    <acs.host>alfresco-acs</acs.host>
    <docker.acs.image>docker.io/jeci/alfresco-platform</docker.acs.image>
    <alfresco.platform.version>5.2.g</alfresco.platform.version>

    <!-- Share Config -->
    <share.host>alfresco-share</share.host>
    <docker.share.image>docker.io/jeci/alfresco-share</docker.share.image>
    <alfresco.share.version>5.2.f</alfresco.share.version>

    <!-- Angular / Content App Config -->
    <appcontent.host>alfresco-app</appcontent.host>
    <docker.node.image>docker.io/library/node</docker.node.image>
    <docker.node.version>10.22</docker.node.version>
    <docker.nginx.image>docker.io/library/nginx</docker.nginx.image>
    <docker.nginx.version>stable-alpine</docker.nginx.version>

    <!-- Postgres Config -->
    <docker.postgres.image>docker.io/postgres</docker.postgres.image>
    <docker.postgres.version>9.6</docker.postgres.version>
    <db.host>alfresco-db</db.host>

    <!-- Solr Config -->
    <solr.host>alfresco-solr</solr.host>
    <docker.solr.image>docker.io/alfresco/alfresco-search-services</docker.solr.image>
    <docker.solr.version>1.2.0</docker.solr.version>

    <!-- Collabora Online Config -->
    <code.host>collabora-online</code.host>
    <docker.code.image>docker.io/collabora/code</docker.code.image>
    <docker.code.version>6.4.9.3</docker.code.version>

    <aca.version>1.10.0</aca.version>
    <!-- This parameter is only required for those cases in which ACS is not exposed in http://localhost:8080/alfresco (i.e. Windows Docker) -->
    <test.acs.endpoint.path/>
  </properties>

  <!-- Libs used in Unit and Integration tests -->
  <!--
    IMPORTANT - Test dependencies need to be here in the top parent POM as
    the Alfresco Maven IT Mojo runs as part of the parent project ...
  -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.5.2</version>
      <scope>test</scope>
    </dependency>
    <!-- The main Alfresco Repo dependency for compiling Java code in src/main/java -->
    <dependency>
      <groupId>${alfresco.groupId}</groupId>
      <artifactId>alfresco-repository</artifactId>
    </dependency>
    <!-- Bring in Spring Context so we can use ApplicationContext, ApplicationContextAware etc -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>3.2.17.RELEASE</version>
      <scope>test</scope>
    </dependency>
    <!-- Bring in Alfresco RAD so we get access to AlfrescoTestRunner classes -->
    <dependency>
      <groupId>org.alfresco.maven</groupId>
      <artifactId>alfresco-rad</artifactId>
      <version>${alfresco.sdk.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <!--
        This will import the dependencyManagement for all artifacts in the selected Alfresco platform.
        NOTE: You still need to define dependencies in your POM, but you can omit version as
          it's enforced by this dependencyManagement.
        NOTE: It defaults to the latest version this SDK pom has been tested with,
          but alfresco version can/should be overridden in your project's pom
      -->
      <dependency>
        <groupId>${alfresco.groupId}</groupId>
        <artifactId>${alfresco.bomDependencyArtifactId}</artifactId>
        <version>${alfresco.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--
        Redefine the following Share dependencies as they have different version numbers than platform.
        They are defined in alfresco-platform-distribution...
      -->
      <dependency>
        <groupId>${alfresco.groupId}</groupId>
        <artifactId>share</artifactId>
        <version>${alfresco.share.version}</version>
        <type>war</type>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>${alfresco.groupId}</groupId>
        <artifactId>share</artifactId>
        <version>${alfresco.share.version}</version>
        <classifier>classes</classifier>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>${alfresco.groupId}</groupId>
        <artifactId>alfresco-web-framework-commons</artifactId>
        <version>${alfresco.share.version}</version>
        <classifier>classes</classifier>
        <scope>provided</scope>
      </dependency>
      <!-- Redefine the following surf dependencies as they have no resolvable version in the alfresco-platform-distribution artifact -->
      <dependency>
        <groupId>org.alfresco.surf</groupId>
        <artifactId>spring-surf</artifactId>
        <version>${alfresco.surf.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.alfresco.surf</groupId>
        <artifactId>spring-surf-api</artifactId>
        <version>${alfresco.surf.version}</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.1</version>
          <configuration>
            <encoding>UTF-8</encoding>
            <nonFilteredFileExtensions>
              <!-- jpg, jpeg, gif, bmp and png are added automatically -->
              <nonFilteredFileExtension>ftl</nonFilteredFileExtension>
              <nonFilteredFileExtension>acp</nonFilteredFileExtension>
              <nonFilteredFileExtension>svg</nonFilteredFileExtension>
              <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
              <nonFilteredFileExtension>doc</nonFilteredFileExtension>
              <nonFilteredFileExtension>docx</nonFilteredFileExtension>
              <nonFilteredFileExtension>xls</nonFilteredFileExtension>
              <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
              <nonFilteredFileExtension>ppt</nonFilteredFileExtension>
              <nonFilteredFileExtension>pptx</nonFilteredFileExtension>
              <nonFilteredFileExtension>bin</nonFilteredFileExtension>
              <nonFilteredFileExtension>lic</nonFilteredFileExtension>
              <nonFilteredFileExtension>swf</nonFilteredFileExtension>
              <nonFilteredFileExtension>zip</nonFilteredFileExtension>
              <nonFilteredFileExtension>tar.gz</nonFilteredFileExtension>
              <nonFilteredFileExtension>msg</nonFilteredFileExtension>
              <nonFilteredFileExtension>jar</nonFilteredFileExtension>
              <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
              <nonFilteredFileExtension>eot</nonFilteredFileExtension>
              <nonFilteredFileExtension>woff</nonFilteredFileExtension>
              <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
              <nonFilteredFileExtension>css</nonFilteredFileExtension>
              <nonFilteredFileExtension>ico</nonFilteredFileExtension>
              <nonFilteredFileExtension>psd</nonFilteredFileExtension>
              <nonFilteredFileExtension>js</nonFilteredFileExtension>
            </nonFilteredFileExtensions>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <!-- Make sure resources in sub-projects are filtered -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!--
        Filter the test resource files in the AIO parent project, and do property substitutions.
        We need this config so this is done before the Alfresco Maven Plugin 'run' is executed.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.1</version>
        <inherited>false</inherited>
        <!-- Run only for the AIO parent Project -->
        <executions>
          <execution>
            <id>copy-and-filter-test-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>src/test/resources</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--
                The Alfresco Maven Plugin contains all the logic to run the extension
                in an embedded Tomcat with the H2 database.
            -->
      <plugin>
        <groupId>org.alfresco.maven.plugin</groupId>
        <artifactId>alfresco-maven-plugin</artifactId>
        <version>${alfresco.sdk.version}</version>
        <configuration>
          <!-- We need the flat file H2 database to run the Repo -->
          <enableH2>true</enableH2>
          <!-- We always need the Platform/Repo webapp - alfresco.war -->
          <enablePlatform>true</enablePlatform>
          <!-- Enable Solr webapp so we can use search -->
          <enableSolr>true</enableSolr>
          <!-- We need Share webapp, so we got a UI for working with the Repo -->
          <enableShare>true</enableShare>
          <!-- Enable the REST API Explorer -->
          <enableApiExplorer>true</enableApiExplorer>
          <!--
                        JARs and AMPs that should be overlayed/applied to the Platform/Repository WAR
                        (i.e. alfresco.war)
                    -->
          <platformModules>
            <!-- Share Services will be ignored if you are on Platform earlier than 5.1 -->
            <moduleDependency>
              <groupId>${alfresco.groupId}</groupId>
              <artifactId>alfresco-share-services</artifactId>
              <version>${alfresco.share.version}</version>
              <type>amp</type>
            </moduleDependency>
            <!-- Bring in custom Modules -->
            <moduleDependency>
              <groupId>${project.groupId}</groupId>
              <artifactId>test-platform-jar</artifactId>
              <version>${project.version}</version>
            </moduleDependency>
            <!-- Bring in the integration tests -->
            <moduleDependency>
              <groupId>${project.groupId}</groupId>
              <artifactId>integration-tests</artifactId>
              <version>${project.version}</version>
              <classifier>tests</classifier>
            </moduleDependency>
          </platformModules>
          <!--
                        JARs and AMPs that should be overlayed/applied to the Share WAR (i.e. share.war)
                    -->
          <shareModules>
            <!-- Bring in custom Modules -->
            <moduleDependency>
              <groupId>${project.groupId}</groupId>
              <artifactId>test-share-jar</artifactId>
              <version>${project.version}</version>
            </moduleDependency>
          </shareModules>
        </configuration>
      </plugin>
      <!-- Compress JavaScript files and store as *-min.js -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>yuicompressor-maven-plugin</artifactId>
        <version>1.5.1</version>
        <executions>
          <!-- Compress the JS files under the assembly folder -->
          <execution>
            <id>compress-assembly</id>
            <goals>
              <goal>compress</goal>
            </goals>
            <configuration>
              <sourceDirectory>${project.basedir}/src/main/assembly/web</sourceDirectory>
              <outputDirectory>${project.basedir}/src/main/assembly/web</outputDirectory>
              <excludes>
                <exclude>**/webscripts/**</exclude>
                <exclude>**/site-webscripts/**</exclude>
                <exclude>**/META-INF/**</exclude>
                <exclude>**/*.lib.js</exclude>
                <exclude>**/*.css</exclude>
                <exclude>**/*-min.js</exclude>
                <exclude>**/*-min.css</exclude>
              </excludes>
              <force>true</force>
              <jswarn>false</jswarn>
            </configuration>
          </execution>
          <!-- Compress the JS files under the resources folder -->
          <execution>
            <id>compress-resources</id>
            <goals>
              <goal>compress</goal>
            </goals>
            <configuration>
              <excludes>
                <exclude>**/webscripts/**</exclude>
                <exclude>**/site-webscripts/**</exclude>
                <exclude>**/*.lib.js</exclude>
                <exclude>**/*.css</exclude>
                <exclude>**/*-min.js</exclude>
                <exclude>**/*-min.css</exclude>
              </excludes>
              <force>true</force>
              <jswarn>false</jswarn>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Hot reloading with JRebel -->
      <plugin>
        <groupId>org.zeroturnaround</groupId>
        <artifactId>jrebel-maven-plugin</artifactId>
        <version>${jrebel.version}</version>
        <executions>
          <execution>
            <id>generate-rebel-xml</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!--
            For more information about how to configure JRebel plugin see:
            http://manuals.zeroturnaround.com/jrebel/standalone/maven.html#maven-rebel-xml
          -->
          <classpath>
            <fallback>all</fallback>
            <resources>
              <resource>
                <directory>${project.build.outputDirectory}</directory>
                <directory>${project.build.testOutputDirectory}</directory>
              </resource>
            </resources>
          </classpath>
          <!--
            alwaysGenerate - default is false
            If 'false' - rebel.xml is generated if timestamps of pom.xml and the current rebel.xml file are not equal.
            If 'true' - rebel.xml will always be generated
          -->
          <alwaysGenerate>true</alwaysGenerate>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <!-- Alfresco Maven Repositories -->
  <repositories>
    <repository>
      <id>alfresco-public</id>
      <url>https://artifacts.alfresco.com/nexus/content/groups/public</url>
    </repository>
    <repository>
      <id>alfresco-public-snapshots</id>
      <url>https://artifacts.alfresco.com/nexus/content/groups/public-snapshots</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </repository>
    <repository>
      <id>gitlab-maven</id>
      <url>https://gitlab.beezim.fr/api/v4/projects/342/packages/maven</url>
    </repository>
  </repositories>

  <distributionManagement>
    <repository>
      <id>gitlab-maven</id>
      <url>https://gitlab.beezim.fr/api/v4/projects/342/packages/maven</url>
    </repository>
    <snapshotRepository>
      <id>gitlab-maven</id>
      <url>https://gitlab.beezim.fr/api/v4/projects/342/packages/maven</url>
    </snapshotRepository>
  </distributionManagement>

  <pluginRepositories>
    <pluginRepository>
      <id>alfresco-plugin-public</id>
      <url>https://artifacts.alfresco.com/nexus/content/groups/public</url>
    </pluginRepository>
    <pluginRepository>
      <id>alfresco-plugin-public-snapshots</id>
      <url>https://artifacts.alfresco.com/nexus/content/groups/public-snapshots</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <modules>
    <module>collabora-platform-extension</module>
    <module>collabora-share-extension</module>
    <module>collabora-aca-extension</module>
    <module>collabora-platform-extension-docker</module>
    <module>collabora-share-extension-docker</module>
    <module>collabora-aca-extension-docker</module>
  </modules>
</project>
